{"name":"code_hdu","tagline":"知行合一","body":"### What does \"HDOJ\" stand for ?\r\n> A HDOJ is short for Hangzhou Dianzi University Online Judge which was founded in September 2005 and has the lastest version of 3.0..\r\n\r\n### Problem 1100\r\n\r\n[原帖](http://blog.sohu.com/people/!Zm9nZ3lfZWxmQHNvaHUuY29t/79594466.html)\r\n\r\n执行步骤：\r\n\r\n首先，我们必须根据输入的N确定结点数node和子编号数index.\r\n\r\n假设node个节点的树一共有A[node]棵，我们可以用一个数组A[0..MAXNODE]来存放这些量，那么：\r\n\r\nA[0] = 1;\r\n\r\nA[1] = 1;\r\n\r\nA[2] = A[0] * A[1] + A[1] * A[0] = 2;  // 其中每一个项表示左右子树结点数的不同组合\r\n\r\nA[3] = A[0] * A[2] + A[1] * A[1] + A[3] * A[0];\r\n\r\n...\r\n\r\n;\r\n\r\n这样可以确定A，同时，建立数组B，B[node]为A的累加，表示node个节点以下的树一共有多少棵。根据搜索N在B[node]中的区间，可以确定节点数，同时，题目说明最大的编号不超过500,000,000，这样通过实验的方法求出MAXNODE = 19就够了。\r\n\r\n计算出的A、B序列大致如下：\r\n\r\nnode =    [      0     1     2     3     4     5     ...    ]\r\n\r\nA =               [      1     1     2     5     14    42    ...    ]\r\n\r\nB =         [      1     2     4     9     23    65    ...    ]\r\n\r\n例如，我们现在输入N = 55\r\n\r\n那么可以看到B[4] <= N < B[5]，于是可以断言这棵树有5个节点，并且他是第N – B[4]个具有5个节点的树，也就是说：node = 5, index = 55 – 23 = 22;\r\n\r\n我们设定一个返回string的函数：\r\n\r\nstring tree( int node, int index );\r\n\r\n这个例子的结果就是调用：\r\n\r\ncout << tree(5, 22) << endl;\r\n\r\n在这个函数里面，我们将index按照这样的顺序搜索。\r\n\r\n因为在同样具有node = 5的所有树里面，最开始是A[0] * A[4] = 14种L = 0，R = 4的组合，因为22 >= 14，所以不是这种组合，我们将index变成22 – 14 = 6；然后是A[1] * A[3] = 5种L = 1，R = 3的组合，因为6 >= 5，所以也不是这种组合，index = 6 – 5 = 1；然后是A[2] * A[2] = 4种L = R = 2的组合，而1 < 4，因此求得这个编号的树为左子树节点为i = 2，右节点为j = 2的形式，并且为这种形式的第i种。\r\n\r\n然后我们必须确定左子树是第几种node = 2的树(indexL)，右子树是第几种node = 2 的树(indexR)。\r\n\r\n按照题目的规律，第0种i = j = 2的情况应该对应于indexL = 0，indexR = 0的情况，第1种i = j = 2的情况应该对应于indexL = 0，indexR = 1的情况。\r\n\r\n那么，普遍地说，当任意的左子树结点数为i，右子树结点数为j的第index种组合，它的左子树序号应该为indexL = index / A[i]，右子树序号应该为indexR = index % A[i]；\r\n\r\n于是，可以递归的调用tree()函数：\r\n\r\nreturn tree(i, indexL) + ‘X’ + tree(j,indexR) 来获得上一级的字符串。\r\n\r\n当然实际的程序要考虑到左子树或右子树为空的情况，来决定是否打上括号。并且递归的退出条件要适当斟酌。\r\n\r\n具体请参看代码。\r\n\r\n***\r\n\r\n### Problem 1102\r\nkruskal算法求最小生成树\r\n查询与合并使用并查集\r\n\r\n```c++\r\nint find(int x) {\r\n    return p[x] == x ? x : p[x] = find(p[x]);\r\n}\r\n```\r\n```c++\r\nvoid union(int a, int b) {\r\n    int x = find(a);\r\n    int y = find(y);\r\n    if (x != y) {\r\n        p[x] = y;\r\n     }\r\n}\r\n```\r\n***\r\n### Problem 1103\r\n使用队列数组模拟排队\r\n\r\n ```c++\r\ndeque<int> q[3];\r\nq[i].push_back; // 入队\r\nq[i].pop_front; // 出队\r\n```\r\n\r\n***\r\n\r\n### Problem 1104\r\n\r\n题意：（注意题目中的%是指mod）开始给了你n, k, m。。。。每次由+m, -m, *m, modm得到新的N，继续对N这样的操作,直到(n+1) mod k== N mod k时结束。。。并且打印路径\r\n\r\n%与mod的区别：%出来的数有正有负，符号取决于左操作数。。。而mod只能是正（因为a = b * q + r (q > 0 and 0 <= r < q), then we have a mod q = r 中r要大于等于0小于q）。。。。。\r\n\r\n所以要用%来计算mod的话就要用这样的公式：a mod b = (a % b + b) % b\r\n\r\n括号里的目的是把左操作数转成正数\r\n\r\n由于新的N可以很大，所以我们每一步都要取%，而且最后要mod k，正常来说每步都%k就行了，但是由于其中的一个操作是N%m,所以我们每一步就不能%k了（%k%m混用会导致%出来的答案错误），而要%(k *m);\r\n\r\n思路： 用BFS（广度优先搜索），找到的第一个解一定是离根最近的，缺点是空间开销大。每一步的状态是`n mod k ((n % k + k) %k)`\r\n\r\n***\r\n\r\n### Problem 1107\r\n\r\n用一个结构体数组保存所有人，如果HP < 0 ，将代号变成0，而不是从数组中删除。题目的意思是一个格子只有两个人而且分属不同门派才战斗,其他情况跳过。\r\n> 当有两名不同门派的弟子进入同一个格子时，一定会发生一次战斗，而且也只有在这种情况下，才会发生战斗。（同派弟子之间当然不会自相残杀；一个格子里三派弟子都有时，大家都会因为害怕别人渔翁得利而不敢出手；而多名同门派弟子也不会联手对付敌人，因为这有悖于武林中崇尚的单打独斗精神，会被人耻笑）\r\n\r\n***\r\n\r\n### Problem 1109\r\n\r\n使用模拟退火搜索最优解\r\n\r\n1. 初始化：初始温度T(充分大)，初始解状态S(是算法迭代的起点)，每个T值的迭代次数L\r\n2. 对k=1，……，L做第(3)至第(6)步：\r\n3. 产生新解S′\r\n4. 计算增量Δt′=C(S′)-C(S)，其中C(S)为评价函数\r\n5. 若Δt′<0则接受S′作为新的当前解，否则以概率exp(-Δt′/T)接受S′作为新的当前解.\r\n6. 如果满足终止条件则输出当前解作为最优解，结束程序。终止条件通常取为连续若干个新解都没有被接受时终止算法。\r\n8. T逐渐减少，且T->0，然后转第2步。\r\n\r\n***\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}